function init(self)
	local map_width = 5
	local map_height = 5
	local direction = astar.DIRECTION_FOUR
	local allocate = map_width * map_height
	local typical_adjacent = 8
	local cache = true

	astar.setup(map_width, map_height, direction, allocate, typical_adjacent, cache)

	local world = {
		2 ,2 ,0 ,2 ,2,
		0 ,0 ,1 ,2 ,2,
		0 ,0 ,2 ,0 ,0,
		0 ,2 ,2 ,2 ,2,
		2 ,1 ,1 ,0 ,1
	}

	astar.set_map(world)
	local costs = {
		[2] = {
			1.0, -- E
			1.0, -- N
			1.0, -- W
			1.0, -- S
		}
	}

	astar.set_costs(costs)

	local start_x = 5
	local start_y = 1
	local max_cost = 3.0 -- near

	local near_result, near_size, nears = astar.solve_near(start_x, start_y, max_cost)

	if near_result == astar.SOLVED then
		print("SOLVED")
		for i, v in ipairs(nears) do
			print("Tile: ", v.x .. "-" .. v.y)
		end
	elseif near_result == astar.NO_SOLUTION then
		print("NO_SOLUTION")
	elseif near_result == astar.START_END_SAME then
		print("START_END_SAME")
	end
end